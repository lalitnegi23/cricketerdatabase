{"version":3,"sources":["components/ListItem.module.css","components/Cric.module.css","components/ListItem.js","components/Cric.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","setAppElement","ListItem","props","useState","playerData","setPlayerData","modalIsOpen","setIsOpen","a","axios","get","item","pid","response","data","console","log","Card","onClick","className","styles","card","Typography","variant","fullName","isOpen","onRequestClose","contentLabel","src","imageURL","batbowl","outerContainer","container","batting","ODIs","Mat","Inns","Runs","T20Is","tests","container2","bowling","Wkts","Cric","player","setPlayer","res","setRes","layout","align","Input","type","value","onChange","e","target","placeholder","fullWidth","searchIcon","icon","fontSize","searched","Grid","spacing","map","xs","sm","md","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.949c5a83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"ListItem_outerContainer__3bMiK\",\"container\":\"ListItem_container__3XFH_\",\"container2\":\"ListItem_container2__2xO8M\",\"batbowl\":\"ListItem_batbowl__3YBnX\",\"card\":\"ListItem_card__2fVYd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Cric_layout__1ZcNL\",\"searched\":\"Cric_searched__1bW6e\",\"searchIcon\":\"Cric_searchIcon__cd22x\",\"icon\":\"Cric_icon__n58HM\"};","import { useState } from \"react\"\r\nimport axios from 'axios';\r\nimport Modal from 'react-modal';\r\nimport { Card, Typography } from \"@material-ui/core\";\r\nimport styles from './ListItem.module.css';\r\nModal.setAppElement('#root');\r\nconst ListItem=(props)=>{\r\n\r\n    const [playerData, setPlayerData]=useState({});\r\n    const [modalIsOpen,setIsOpen] = useState(false);\r\n\r\n    function closeModal(){\r\n        setIsOpen(false);\r\n      }\r\n    async function searchPlayerByID(){\r\n        try {\r\n            const response = await axios.get(`https://cricapi.com/api/playerStats?apikey=vv3PJNB3QmhB0VuU1En7mBXo0183&pid=${props.item.pid}`);\r\n            setPlayerData(response.data);\r\n            setIsOpen(true);\r\n        } catch (error) {\r\n            console.log(`no such player exists`)\r\n        }\r\n    }\r\n    return(<div>\r\n        <Card onClick={searchPlayerByID} className={styles.card}>\r\n            <Typography variant=\"h6\">{props.item.fullName}</Typography>\r\n        </Card> \r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          contentLabel=\"Player Data\"\r\n        >\r\n            <h2>{playerData?.fullName}</h2>\r\n            <img src={playerData.imageURL}/>\r\n            <div className={styles.batbowl}>\r\n            <h3>Batting</h3>\r\n            <h3>Bowling</h3>\r\n            </div>\r\n            <div className={styles.outerContainer}>\r\n            <div className={styles.container}>\r\n            <div>\r\n            <h2>ODIs</h2>\r\n            <h3>Matches - {playerData?.data?.batting?.ODIs?.Mat}</h3>\r\n            <h3>Innings - {playerData?.data?.batting?.ODIs?.Inns}</h3>\r\n            <h3>Runs - {playerData?.data?.batting?.ODIs?.Runs}</h3>\r\n            </div>\r\n            <div>\r\n            <h2>T20Is</h2>\r\n            <h3>Matches - {playerData?.data?.batting?.T20Is?.Mat}</h3>\r\n            <h3>Innings - {playerData?.data?.batting?.T20Is?.Inns}</h3>\r\n            <h3>Runs - {playerData?.data?.batting?.T20Is?.Runs}</h3>\r\n            </div>\r\n            <div>\r\n            <h2>Tests</h2>\r\n            <h3>Matches - {playerData?.data?.batting?.tests?.Mat}</h3>\r\n            <h3>Innings - {playerData?.data?.batting?.tests?.Inns}</h3>\r\n            <h3>Runs - {playerData?.data?.batting?.tests?.Runs}</h3>\r\n            </div>\r\n            </div>\r\n            <div className={styles.container2}>\r\n            <div>\r\n            <h2>ODIs</h2>\r\n            <h3>Matches - {playerData?.data?.bowling?.ODIs?.Mat}</h3>\r\n            <h3>Innings - {playerData?.data?.bowling?.ODIs?.Inns}</h3>\r\n            <h3>Wickets - {playerData?.data?.bowling?.ODIs?.Wkts}</h3>\r\n            </div>\r\n            <div>\r\n            <h2>T20Is</h2>\r\n            <h3>Matches - {playerData?.data?.bowling?.T20Is?.Mat}</h3>\r\n            <h3>Innings - {playerData?.data?.bowling?.T20Is?.Inns}</h3>\r\n            <h3>Wickets - {playerData?.data?.bowling?.T20Is?.Wkts}</h3>\r\n            </div>\r\n            <div>\r\n            <h2>Tests</h2>\r\n            <h3>Matches - {playerData?.data?.bowling?.tests?.Mat}</h3>\r\n            <h3>Innings - {playerData?.data?.bowling?.tests?.Inns}</h3>\r\n            <h3>Wickets - {playerData?.data?.bowling?.tests?.Wkts}</h3>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem","import {  useState } from \"react\";\r\nimport axios from 'axios';\r\nimport ListItem from \"./ListItem\";\r\nimport {Grid, Input, Typography } from '@material-ui/core';\r\nimport styles from './Cric.module.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nconst Cric=()=>{\r\nconst [player, setPlayer]=useState('');\r\nconst [res, setRes]=useState([]);\r\n\r\nasync function searchPlayerByName(){\r\n    try {\r\n        const response = await axios.get(`https://cricapi.com/api/playerFinder?apikey=vv3PJNB3QmhB0VuU1En7mBXo0183&name=${player}`)\r\n        setRes(response.data.data);\r\n    } catch (error) {\r\n        console.log(`no such player exists`)\r\n    }\r\n}\r\n    return(\r\n        <div className={styles.layout}>\r\n        <Typography\r\n        variant='h4'\r\n        align='center'\r\n        >Cricket Player's Database</Typography>\r\n        <Input\r\n        type=\"text\"\r\n        value={player}\r\n        onChange={(e)=>setPlayer(e.target.value)}\r\n        placeholder=\"Search for Player...\"\r\n        fullWidth\r\n        />\r\n        <div className={styles.searchIcon}>\r\n        <SearchIcon\r\n        onClick={searchPlayerByName}\r\n        className={styles.icon}\r\n        fontSize=\"large\"></SearchIcon>\r\n        </div>\r\n        \r\n        {/* <input type=\"text\" value={player} onChange={(e)=>setPlayer(e.target.value)}/> */}\r\n        {/* <button onClick={searchPlayerByName}>Fire</button> */}\r\n        <div className={styles.searched}>\r\n            <Grid container spacing={3}>\r\n        {res.map((item)=>\r\n        <Grid key={item.pid} xs={12} sm={6} md={6}>\r\n        <ListItem \r\n            item={item}\r\n           />\r\n           </Grid>\r\n           )}\r\n           \r\n           </Grid>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cric;","import React from 'react';\r\nimport './App.css';\r\nimport Cric from './components/Cric';\r\n\r\nfunction App() {\r\n  return (\r\n      <Cric/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    \r\n      <App />\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}